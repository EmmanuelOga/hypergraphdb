/*
 * This file is part of the HyperGraphDB source distribution. This is copyrighted
 * software. For permitted uses, licensing options and redistribution, please see
 * the LicensingInformation file at the root level of the distribution.
 *
 * Copyright (c) 2007
 * Kobrix Software, Inc.  All rights reserved.
 */
package org.hypergraphdb.app.xsd;

import java.util.HashMap;
import java.util.Map;

import org.hypergraphdb.HGException;
import org.hypergraphdb.HGHandle;
import org.hypergraphdb.HGHandleFactory;
import org.hypergraphdb.HGPersistentHandle;
import org.hypergraphdb.HyperGraph;
import org.hypergraphdb.LazyRef;
import org.hypergraphdb.atom.HGAtomRef;
import org.hypergraphdb.type.AtomRefType;
import org.hypergraphdb.type.HGAtomType;
import org.hypergraphdb.type.LinkRecord;
import org.hypergraphdb.type.Record;
import org.hypergraphdb.type.Slot;
import org.hypergraphdb.type.TypeUtils;

/**
 * This will be actually generated by CTC.
 */
public class USAddressComplexRecordType implements HGAtomType
{
   private HyperGraph hg;

//   Map map = (Map)obj;
//   HGPersistentHandle hgpersistenthandle = HGHandleFactory.makeHandle("da78f883-55d8-11dc-8f20-001617d7885d");
//   org.hypergraphdb.type.HGAtomType hgatomtype = hg.getTypeSystem().getType(hgpersistenthandle);
//   HGPersistentHandle ahgpersistenthandle[] = new HGPersistentHandle[14];
//   ahgpersistenthandle[0] = hg.getPersistentHandle(hgpersistenthandle);
//   Object obj1 = map.get("USAddress");
//   ahgpersistenthandle[1] = TypeUtils.storeValue(hg, obj1, hgatomtype);
//   ahgpersistenthandle[2] = hg.getPersistentHandle(hgpersistenthandle);
//   obj1 = map.get("name");
//   ahgpersistenthandle[3] = TypeUtils.storeValue(hg, obj1, hgatomtype);
//   ahgpersistenthandle[4] = hg.getPersistentHandle(hgpersistenthandle);
//   obj1 = map.get("street");
//   ahgpersistenthandle[5] = TypeUtils.storeValue(hg, obj1, hgatomtype);
//   ahgpersistenthandle[6] = hg.getPersistentHandle(hgpersistenthandle);
//   obj1 = map.get("city");
//   ahgpersistenthandle[7] = TypeUtils.storeValue(hg, obj1, hgatomtype);
//   ahgpersistenthandle[8] = hg.getPersistentHandle(hgpersistenthandle);
//   obj1 = map.get("state");
//   ahgpersistenthandle[9] = TypeUtils.storeValue(hg, obj1, hgatomtype);
//   ahgpersistenthandle[10] = hg.getPersistentHandle(hgpersistenthandle);
//   obj1 = map.get("zip");
//   ahgpersistenthandle[11] = TypeUtils.storeValue(hg, obj1, hgatomtype);
//   ahgpersistenthandle[12] = hg.getPersistentHandle(hgpersistenthandle);
//   obj1 = map.get("country");
//   ahgpersistenthandle[13] = TypeUtils.storeValue(hg, obj1, hgatomtype);
//   HGPersistentHandle hgpersistenthandle1 = TypeUtils.getNewHandleFor(hg, map);
//   hg.getStore().store(hgpersistenthandle1, ahgpersistenthandle);
//   return hgpersistenthandle1;
   
   
   /**
    * 
    */
   public Object make(
      HGPersistentHandle handle, LazyRef<HGHandle[]> targetSet,
      LazyRef<HGHandle[]> incidenceSet)
   {
      Map<String,Object> result = new HashMap<String,Object>();

      HGPersistentHandle[] layout = hg.getStore().getLink(handle);

      HGAtomType type=hg.getTypeSystem().getType(layout[0]);
      Object value = TypeUtils.makeValue(hg, layout[1], type);
      result.put("USAddress", value);
         
      type=hg.getTypeSystem().getType(layout[0]);
      value = TypeUtils.makeValue(hg, layout[1], type);
      result.put("name", value);

      type=hg.getTypeSystem().getType(layout[0]);
      value = TypeUtils.makeValue(hg, layout[1], type);
      result.put("street", value);

      type=hg.getTypeSystem().getType(layout[0]);
      value = TypeUtils.makeValue(hg, layout[1], type);
      result.put("city", value);

      type=hg.getTypeSystem().getType(layout[0]);
      value = TypeUtils.makeValue(hg, layout[1], type);
      result.put("state", value);

      type=hg.getTypeSystem().getType(layout[0]);
      value = TypeUtils.makeValue(hg, layout[1], type);
      result.put("zip", value);

      type=hg.getTypeSystem().getType(layout[0]);
      value = TypeUtils.makeValue(hg, layout[1], type);
      result.put("country", value);

      return result;
   }

   public void release(
      HGPersistentHandle handle)
   {
      // TODO Auto-generated method stub
   }

   /**
    * 
    */
   public void setHyperGraph(
      HyperGraph hg)
   {
      this.hg = hg;
   }

   /**
    * 
    */
   public HGPersistentHandle store(
      Object o)
   {
      Map instance = (Map) o;

      //
      HGPersistentHandle[] layout = new HGPersistentHandle[3 * 2];

      String s = (String) instance.get("name");
      // xsd type
      int i = 0;
      HGHandle typeHandle = hg.getTypeSystem().getTypeHandle(
            "http://www.w3.org/2001/XMLSchema#string");
      HGAtomType type = hg.getTypeSystem().getType(
            "http://www.w3.org/2001/XMLSchema#string");
      layout[3 * i] = hg.getPersistentHandle(typeHandle);
      layout[3 * i + 1] = TypeUtils.storeValue(hg, "name", type);
      layout[3 * i + 2] = TypeUtils.storeValue(hg, s, type);

      s = (String) instance.get("city");
      i = 1;
      layout[3 * i] = hg.getPersistentHandle(typeHandle);
      layout[3 * i + 1] = TypeUtils.storeValue(hg, "city", type);
      layout[3 * i + 2] = TypeUtils.storeValue(hg, s, type);

      HGPersistentHandle handle = TypeUtils.getNewHandleFor(hg, instance);
      hg.getStore().store(handle, layout);

      return handle;
   }

   /**
    * 
    */
   public boolean subsumes(
      Object general, Object specific)
   {
      // TODO Auto-generated method stub
      return false;
   }

}
