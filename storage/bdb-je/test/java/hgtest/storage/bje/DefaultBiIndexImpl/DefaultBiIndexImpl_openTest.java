package hgtest.storage.bje.DefaultBiIndexImpl;


import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.Environment;
import org.easymock.EasyMock;
import org.hypergraphdb.HGException;
import org.hypergraphdb.storage.ByteArrayConverter;
import org.hypergraphdb.storage.bje.BJEConfig;
import org.hypergraphdb.storage.bje.BJEStorageImplementation;
import org.hypergraphdb.storage.bje.DefaultBiIndexImpl;
import org.hypergraphdb.transaction.HGTransactionManager;
import org.powermock.api.easymock.PowerMock;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.File;
import java.util.Comparator;

import static org.testng.Assert.assertEquals;

/**
 * @author Yuriy Sechko
 */
public class DefaultBiIndexImpl_openTest
{
	private final File envHome = new File(System.getProperty("user.home")
			+ File.separator + "test_environment");

	private static final String INDEX_NAME = "sample_index";
	// storage - used only for getting configuration data
	private final BJEStorageImplementation storage = PowerMock
			.createStrictMock(BJEStorageImplementation.class);
	private HGTransactionManager transactionManager = PowerMock
			.createStrictMock(HGTransactionManager.class);
	private ByteArrayConverter<Integer> keyConverter = PowerMock
			.createStrictMock(ByteArrayConverter.class);
	private ByteArrayConverter<String> valueConverter = PowerMock
			.createStrictMock(ByteArrayConverter.class);
	private Comparator<?> comparator = PowerMock
			.createStrictMock(Comparator.class);

	// real instances we need: Database, Environment (come from the Sleepycat je lib)
	EnvironmentConfig config;
	Environment environment;

	@BeforeMethod
	protected void resetMocksAndDeleteTestDirectory()
	{
		PowerMock.resetAll();
		deleteTestDirectory();
		startupEnvironment();
	}

	@AfterMethod
	protected void verifyMocksAndDeleteTestDirectory()
	{
		PowerMock.verifyAll();
		deleteTestDirectory();
	}

	private void deleteTestDirectory()
	{
		final File[] filesInTestDir = envHome.listFiles();
		if (filesInTestDir != null)
		{
			for (final File eachFile : filesInTestDir)
			{
				eachFile.delete();
			}
		}
		envHome.delete();
	}

	private void startupEnvironment()
	{
		envHome.mkdirs();
		config = new EnvironmentConfig();
		config.setAllowCreate(true).setReadOnly(false).setTransactional(true);
		environment = new Environment(envHome, config);
	}

	// this method is used in most test cases for initializing fake instance of BJEStorageImplementation
	private void mockStorage() {
		EasyMock.expect(storage.getConfiguration()).andReturn(new BJEConfig());
		EasyMock.expect(storage.getBerkleyEnvironment()).andReturn(environment)
				.times(3);
	}

	@Test
	public void indexNameIsNull() throws Exception
	{
		mockStorage();
		PowerMock.replayAll();

		final DefaultBiIndexImpl indexImpl = new DefaultBiIndexImpl(null,
				storage, transactionManager, keyConverter, valueConverter,
				comparator);
		// there is not exception here
		// just because (DB_NAME_PREFIX + name) becomes "hgstore_idx_null";
		indexImpl.open();
	}

	@Test
	public void storageIsNull() throws Exception
	{
		final HGException expected = new HGException(
				"While attempting to open index ;sample_index': java.lang.NullPointerException");
		PowerMock.replayAll();

		final DefaultBiIndexImpl indexImpl = new DefaultBiIndexImpl(INDEX_NAME,
				null, transactionManager, keyConverter, valueConverter,
				comparator);
		try
		{
			indexImpl.open();
		}
		catch (Exception occurred)
		{
			assertEquals(occurred.getClass(), expected.getClass());
			assertEquals(occurred.getMessage(), expected.getMessage());
		}
	}

	@Test
	public void transactionManagerIsNull() throws Exception
	{
		mockStorage();
		PowerMock.replayAll();

		final DefaultBiIndexImpl indexImpl = new DefaultBiIndexImpl(INDEX_NAME,
				storage, null, keyConverter, valueConverter, comparator);
		// no exception here, transactionManager is not used
		// exactly in the open() method
		indexImpl.open();
	}

	@Test
	public void keyConverterIsNull() throws Exception
	{
		mockStorage();
		PowerMock.replayAll();

		final DefaultBiIndexImpl indexImpl = new DefaultBiIndexImpl(INDEX_NAME,
				storage, transactionManager, null, valueConverter, comparator);
		// no exception here, keyConverter is not used
		// exactly in the open() method
		indexImpl.open();
	}

	@Test
	public void valueConverterIsNull() throws Exception
	{
		mockStorage();
		PowerMock.replayAll();

		final DefaultBiIndexImpl indexImpl = new DefaultBiIndexImpl(INDEX_NAME,
				storage, transactionManager, keyConverter, null, comparator);
		// no exception here, similar to the case above
		indexImpl.open();
	}

	@Test
	public void comparatorIsNull() throws Exception
	{
		mockStorage();
		PowerMock.replayAll();

		final DefaultBiIndexImpl indexImpl = new DefaultBiIndexImpl(INDEX_NAME,
				storage, transactionManager, keyConverter, valueConverter, null);
		// no exception here, similar to the case above
		indexImpl.open();
	}

	@Test
	public void storageThrowsException() throws Exception
	{
		final HGException expected = new HGException(
				"While attempting to open index ;sample_index': java.lang.IllegalStateException");

		EasyMock.expect(storage.getConfiguration()).andReturn(new BJEConfig());
		EasyMock.expect(storage.getBerkleyEnvironment()).andReturn(environment);
		EasyMock.expect(storage.getBerkleyEnvironment()).andThrow(
				new IllegalStateException());
		PowerMock.replayAll();

		final DefaultBiIndexImpl indexImpl = new DefaultBiIndexImpl(INDEX_NAME,
				storage, transactionManager, keyConverter, valueConverter,
				comparator);
		try
		{
			indexImpl.open();
		}
		catch (Exception occurred)
		{
			assertEquals(occurred.getClass(), expected.getClass());
			assertEquals(occurred.getMessage(), expected.getMessage());
		}
	}
}
