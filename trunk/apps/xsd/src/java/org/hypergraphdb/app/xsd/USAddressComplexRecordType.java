/*
 * This file is part of the HyperGraphDB source distribution. This is copyrighted
 * software. For permitted uses, licensing options and redistribution, please see
 * the LicensingInformation file at the root level of the distribution.
 *
 * Copyright (c) 2007
 * Kobrix Software, Inc.  All rights reserved.
 */
package org.hypergraphdb.app.xsd;

import java.util.HashMap;
import java.util.Map;

import org.hypergraphdb.HGPersistentHandle;
import org.hypergraphdb.HyperGraph;
import org.hypergraphdb.IncidenceSetRef;
import org.hypergraphdb.LazyRef;
import org.hypergraphdb.type.HGAtomType;
import org.hypergraphdb.type.TypeUtils;

/**
 * This will be actually generated by CTC.
 */
public class USAddressComplexRecordType implements HGAtomType
{
   private HyperGraph hg;
 
   
   public Object make(HGPersistentHandle hgpersistenthandle, LazyRef lazyref, IncidenceSetRef lazyref1)
   {
       HashMap hashmap = new HashMap();
       HGPersistentHandle ahgpersistenthandle[] = hg.getStore().getLink(hgpersistenthandle);
       if(!ahgpersistenthandle[1].equals(hg.getHandleFactory().nullHandle()))
       {
           HGPersistentHandle hgpersistenthandle1 = hg.getHandleFactory().makeHandle("d9d43ee3-6b0b-11dc-b956-001617d7885d");
           org.hypergraphdb.type.HGAtomType hgatomtype = hg.getTypeSystem().getType(hgpersistenthandle1);
           Object obj = TypeUtils.makeValue(hg, ahgpersistenthandle[1], hgatomtype);
           hashmap.put("name", obj);
       }
       if(ahgpersistenthandle[3] != null)
       {
           HGPersistentHandle hgpersistenthandle2 = hg.getHandleFactory().makeHandle("d9d43ee3-6b0b-11dc-b956-001617d7885d");
           org.hypergraphdb.type.HGAtomType hgatomtype1 = hg.getTypeSystem().getType(hgpersistenthandle2);
           Object obj1 = TypeUtils.makeValue(hg, ahgpersistenthandle[3], hgatomtype1);
           hashmap.put("street", obj1);
       }
       if(ahgpersistenthandle[5] != null)
       {
           HGPersistentHandle hgpersistenthandle3 = hg.getHandleFactory().makeHandle("d9d43ee3-6b0b-11dc-b956-001617d7885d");
           org.hypergraphdb.type.HGAtomType hgatomtype2 = hg.getTypeSystem().getType(hgpersistenthandle3);
           Object obj2 = TypeUtils.makeValue(hg, ahgpersistenthandle[5], hgatomtype2);
           hashmap.put("city", obj2);
       }
       if(ahgpersistenthandle[7] != null)
       {
           HGPersistentHandle hgpersistenthandle4 = hg.getHandleFactory().makeHandle("d9d43ee3-6b0b-11dc-b956-001617d7885d");
           org.hypergraphdb.type.HGAtomType hgatomtype3 = hg.getTypeSystem().getType(hgpersistenthandle4);
           Object obj3 = TypeUtils.makeValue(hg, ahgpersistenthandle[7], hgatomtype3);
           hashmap.put("state", obj3);
       }
       if(ahgpersistenthandle[9] != null)
       {
           HGPersistentHandle hgpersistenthandle5 = hg.getHandleFactory().makeHandle("d9dddb7b-6b0b-11dc-b956-001617d7885d");
           org.hypergraphdb.type.HGAtomType hgatomtype4 = hg.getTypeSystem().getType(hgpersistenthandle5);
           Object obj4 = TypeUtils.makeValue(hg, ahgpersistenthandle[9], hgatomtype4);
           hashmap.put("zip", obj4);
       }
       if(ahgpersistenthandle[11] != null)
       {
           HGPersistentHandle hgpersistenthandle6 = hg.getHandleFactory().makeHandle("eeee128b-c5c1-11d9-bfe0-4b9280693a83");
           org.hypergraphdb.type.HGAtomType hgatomtype5 = hg.getTypeSystem().getType(hgpersistenthandle6);
           Object obj5 = TypeUtils.makeValue(hg, ahgpersistenthandle[11], hgatomtype5);
           hashmap.put("country", obj5);
       }
       return hashmap;
   }


   public void release(
      HGPersistentHandle handle)
   {
      // TODO Auto-generated method stub
   }

   /**
    * 
    */
   public void setHyperGraph(
      HyperGraph hg)
   {
      this.hg = hg;
   }

   public HGPersistentHandle store(Object obj)
   {
       Map map = (Map)obj;
       HGPersistentHandle hgpersistenthandle = hg.getHandleFactory().makeHandle("9e21270f-6b0a-11dc-99d5-001617d7885d");
       org.hypergraphdb.type.HGAtomType hgatomtype = hg.getTypeSystem().getType(hgpersistenthandle);
       HGPersistentHandle ahgpersistenthandle[] = new HGPersistentHandle[12];
       hgpersistenthandle = hg.getHandleFactory().makeHandle("9e21270f-6b0a-11dc-99d5-001617d7885d");
       ahgpersistenthandle[0] = hg.getPersistentHandle(hgpersistenthandle);
       Object obj1 = map.get("name");
       if(obj1 != null)
           ahgpersistenthandle[1] = TypeUtils.storeValue(hg, obj1, hg.getTypeSystem().getType(hgpersistenthandle));
       else
          ahgpersistenthandle[1] = hg.getHandleFactory().nullHandle();
       hgpersistenthandle = hg.getHandleFactory().makeHandle("9e21270f-6b0a-11dc-99d5-001617d7885d");
       ahgpersistenthandle[2] = hg.getPersistentHandle(hgpersistenthandle);
       obj1 = map.get("street");
       if(obj1 != null)
           ahgpersistenthandle[3] = TypeUtils.storeValue(hg, obj1, hg.getTypeSystem().getType(hgpersistenthandle));
       hgpersistenthandle = hg.getHandleFactory().makeHandle("9e21270f-6b0a-11dc-99d5-001617d7885d");
       ahgpersistenthandle[4] = hg.getPersistentHandle(hgpersistenthandle);
       obj1 = map.get("city");
       if(obj1 != null)
           ahgpersistenthandle[5] = TypeUtils.storeValue(hg, obj1, hg.getTypeSystem().getType(hgpersistenthandle));
       hgpersistenthandle = hg.getHandleFactory().makeHandle("9e21270f-6b0a-11dc-99d5-001617d7885d");
       ahgpersistenthandle[6] = hg.getPersistentHandle(hgpersistenthandle);
       obj1 = map.get("state");
       if(obj1 != null)
           ahgpersistenthandle[7] = TypeUtils.storeValue(hg, obj1, hg.getTypeSystem().getType(hgpersistenthandle));
       hgpersistenthandle = hg.getHandleFactory().makeHandle("9e38f577-6b0a-11dc-99d5-001617d7885d");
       ahgpersistenthandle[8] = hg.getPersistentHandle(hgpersistenthandle);
       obj1 = map.get("zip");
       if(obj1 != null)
           ahgpersistenthandle[9] = TypeUtils.storeValue(hg, obj1, hg.getTypeSystem().getType(hgpersistenthandle));
       hgpersistenthandle = hg.getHandleFactory().makeHandle("eeee128b-c5c1-11d9-bfe0-4b9280693a83");
       ahgpersistenthandle[10] = hg.getPersistentHandle(hgpersistenthandle);
       obj1 = map.get("country");
       if(obj1 != null)
           ahgpersistenthandle[11] = TypeUtils.storeValue(hg, obj1, hg.getTypeSystem().getType(hgpersistenthandle));
       HGPersistentHandle hgpersistenthandle1 = TypeUtils.getNewHandleFor(hg, map);
       hg.getStore().store(hgpersistenthandle1, ahgpersistenthandle);
       return hgpersistenthandle1;
   }
   
   /**
    * 
    */
   public boolean subsumes(
      Object general, Object specific)
   {
      // TODO Auto-generated method stub
      return false;
   }

}
