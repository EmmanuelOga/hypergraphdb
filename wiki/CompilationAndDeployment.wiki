#summary Compiling HGDB from Source Code and Deployment

HyperGraphDB consists of a core component implementing the nuts and bolts of the database itself together with several applications in different domains. Some of the applications have dependencies on others and all have a dependency on the `management` component. 

Deployment consists of copying relevant files to your application and setting a few JVM runtime properties. In general, HyperGraphDB is used as a library so it very much depends on your specific application how and which components are being deployed. 

= Source Code Directory Structure =

Source code is organized in the following top-level directories:

|| apps || All HGDB application modules. There's on directory per application module under `apps` ||
|| core || The core of HGDB, including the distributed version. ||
|| viewer || A component for visualization of HGDB graphs. ||
|| test || Unit tests, mainly for the core component. ||
|| doc || Some documentation, obsolete as now all documentation is in Wiki form. ||

The directory structure under core, viewer and each application modules roughly follows the pattern:

|| src || The actual source code. Sub-divided under `java`, possibly `config` and possibly other languages. ||
|| jars || 3d party Java libraries dependencies for that particular component. ||
|| etc. || Possibly some other self-explanatory directories depending on the component. ||

= Compilation =

Compilation is done with the ANT build system (see http://ant.apache.org/). You can compile everything or individual components with the top-level ant script. Or you can compile individual components from their own home directories by running their respective ant scripts. 

As a reminder, running `ant -p` lists all available targets for a project script.

== Compiling Core ==

There are a couple of different version that can be made out of core, depending on you will be using the system as a distributed database or just an embedded database:

  * *hgdbfull.jar* - contains both the database management and the distributed version code.
  * *hypergraphdb.jar* - contains just the embedded database version.
  * *hgpeer.jar* - contains just the peer/distributed version related code. 

So, *hgdbfull.jar* is a merge of *hypergraphdb.jar* with *hgpeer.jar*. The code from latter is entirely in the `org.hypergraphdb.peer` package.

== Compiling the Application Module ==

Each application module is essentially contained in one jar that you can build with its respective script. 

= Deployment =

Deployment of HyperGraphDB and/or its application modules obviously involves first and foremost the standard Java requirement of having all needed classes/jar files in the JVM classpath. In addition, HyperGraphDB makes use of a few native libraries available under `core/native/[os-name]` for each supported operating system. Those libraries must be in the OS path of the application using HGDB. This is done either by modifying the OS PATH environment variable or passing in the `-Djava.library.path` command line option (or equivalent) to the JVM.

HyperGraphDB itself, as an embedded database, doesn't require any configuration. However, the distributed version needs to be configured as documented on the PeerConfiguration topic. In addition, the distributed version comes with a main program `org.hypergraphdb.peer.StartPeer` that takes as a single argument the peer configuration file.

= Compiling with GCJ =

Instructions worked on Ubuntu 8.10, but should work everywhere GCJ is installed.

First, compile the BerkeleyDB Java interface with GCJ as follows. In the BerkeleyDB distribution top folder run:

gcj -fjni -o dbjava.o -c `find java/src -name '*.java' | grep -v debug`

that produces an object file 'dbjava.o' that needs to be linked to HGDB. If you're compiling on 64bit, add the option -fPIC to the above command line. Then in 'hypergraphdb/core' run:

gcj -shared --classpath=jars/db.jar dbjava.o hypergraphdb.jar -o hgdb.so

again adding -fPIC on 64bit. That'll produce a shared library hgdb.so that can be loaded from C++ applications. 