#summary Creating a Database.

HyperGraphDB manages storage as a set of files in a directory. When you create a new database, you need to designate a directory that will hold the data. Then in your Java program, import the relevant classes and create a new HyperGraphDB object. For example:

{{{
import org.hypergraphdb.*;

public class MyProgram
{ 
    public static void main(String [] args)
    {
        String databaseLocation = args[0];
        HyperGraph hg; 
     	// ….
        try
	{
            hg = new HyperGraph(databaseLocation);
        }
        catch (Throwable t)
        {
            t.printStackTrace();
        }
        finally
        {
            hg.close();
        }
    }
}

}}}

As you can see, creating a database amounts to creating a new HyperGraphDB instance. If the database does not exist, it will be created. If it does exist, it will be opened. So the same code is used to create or open a database. If you want an “open if exists, otherwise throw an exception” behavior, you should perform the check in your own code.

As an opened database obviously maintains some OS resources open, it is wise to make sure it is closed in a finally block.  It is also very important to properly close a database in order to avoid any data loss or corruption of the underlying low-level storage. HyperGraphDB may throw exceptions, but none of the methods throws checked exceptions. Usually the exception thrown will be a `HGException`, possibly wrapping some underlying cause.