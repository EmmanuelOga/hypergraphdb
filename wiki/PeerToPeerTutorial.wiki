#summary A tutorial on setting a HyperGraphDB P2P network.

== Configuring the XMPP Server ==

Any standard compliant XMPP server can be used in principle. Since we relying on the Smack client libraries by [http://www.igniterealtime.com Ignite Realtime], we have used their [http://www.igniterealtime.org/projects/openfire/index.jsp OpenFire] server so far and we highly recommend it. To install the server:

  # [http://www.igniterealtime.org/downloads/index.jsp#openfire Download Openfire] for your platform of choice and install it locally to your machine.
  # Under 'bin' in the installation directory, start the `openfired` executable.
  # An HTTP server is now available locally on port 9090. Hit that port with the browser.
  # Go through the configuration steps in the web interface: selected the _Embedded Database_ for simplicity. 
  # At the end of the configuration process, the current version 3.6.4 prompts you to login to the admin console, but the password you selected doesn't work. Just kill the server and start it again, it will work.

Once the server is properly installed, the next step is configuring users and/or chat rooms so that peers can see each other. There are two ways that peers A and B can connect:

  # Both A and B are registered users and they are in each other's roster (i.e. list of "friends"). 
  # There is a chat room to which both A and B are participants.

Users and chat rooms can be configured with the web interface. The names and passwords that you choose will have to be specified in HGDB configuration files. Since the HGDB API doesn't offer means to manage rosters, they need to be administered directly with the server web console, or by some other means. Hence, option 2 is easier to get started. But for a fine-grained connectivity control (who talks to who), option 1 is better.

By default, the sever allows peers to create their accounts automatically or to login anonymously. The HyperGraphDB lets you do that as well. That is, if automatic registration is enabled, you can just pass in a username and a password to the HGDB and if it can't login, it will create an account with that username and password.

== Main elements of a HHDB peer ==

 # The configuration file - see PeerConfiguration page
 # The backing `HyperGraph` instance.

== Examples ==

=== The main function for a "client" peer ===

{{{
public static void main(String[] args)
{
	HyperGraphPeer peer = new HyperGraphPeer(args[0], HGEnvironment.get(args[1]));
		
	if (peer.start("user", "pwd"))
	{
		//peer is started ... 
	}
}

}}}

=== The main function for a "server" peer ===

{{{
public static void main(String[] args)
{
	HyperGraphPeer server = new HyperGraphPeer(...);
	
	if (server.start("user", "pwd"))
	{
		//peer is started ...

		//set atom interests ...
		server.setAtomInterests(new AnyAtomCondition());

		//catch up ...
		server.catchUp();
	}		
}

}}}

=== Registering user types ===

In order to use objects of a give type on any peer, the peer will have to know its type. See below the code to register the _User_ class.

{{{
	HGPersistentHandle typeHandle = UUIDPersistentHandle.makeHandle("e917bda6-0932-4a66-9aeb-3fc84f04ce57");
	peer.registerType(typeHandle, User.class);
}}}