#summary A tutorial on setting a HyperGraphDB P2P network.

== Configuring the XMPP Server ==

Any standard compliant XMPP server can be used in principle. Since we relying on the Smack client libraries by [http://www.igniterealtime.com Ignite Realtime], we have used their [http://www.igniterealtime.org/projects/openfire/index.jsp OpenFire] server so far and we highly recommend it. To install the server:

  # [http://www.igniterealtime.org/downloads/index.jsp#openfire Download Openfire] for your platform of choice and install it locally to your machine.
  # Under 'bin' in the installation directory, start the `openfired` executable.
  # An HTTP server is now available locally on port 9090. Hit that port with the browser.
  # Go through the configuration steps in the web interface: selected the _Embedded Database_ for simplicity. 
  # At the end of the configuration process, the current version 3.6.4 prompts you to login to the admin console, but the password you selected doesn't work. Just kill the server and start it again, it will work.

Once the server is properly installed, the next step is configuring users and/or chat rooms so that peers can see each other. There are two ways that peers A and B can connect:

  # Both A and B are registered users and they are in each other's roster (i.e. list of "friends"). 
  # There is a chat room to which both A and B are participants.

Users and chat rooms can be configured with the web interface. The names and passwords that you choose will have to be specified in HGDB configuration files. Since the HGDB API doesn't offer means to manage rosters, they need to be administered directly with the server web console, or by some other means. Hence, option 2 is easier to get started. But for a fine-grained connectivity control (who talks to who), option 1 is better.

By default, the sever allows peers to create their accounts automatically or to login anonymously. The HyperGraphDB lets you do that as well. That is, if automatic registration is enabled, you can just pass in a username and a password to the HGDB and if it can't login, it will create an account with that username and password.

For tutorial purposes, create a single chat room called 'play' and leave all options to their default values.

== Configuring a Single HyperGraphDB Peer ==

A HyperGraphDB peer is configured with a set of parameters that can be passed as a JSON file (or runtime resource), or as a Java Map. The parameter values are simple types or nested maps (mirroring JSON's object nesting). Here we'll go with the more readable JSON, but you can do the same by manually putting data into a Java map. So create a text file called `hgp2p.json` with the following content:

{{{
{
"interfaceType"	: "org.hypergraphdb.peer.xmpp.XMPPPeerInterface",
"localDB": "c:/temp/hgdbpeertest",
"peerName"	: "HGDBPeer",
"interfaceConfig"		:
  {
    "user" : "hgtest",
    "password" : "password",
    "serverUrl"	: "myhost",
    "room" : "play@conference.myhost",
    "autoRegister" : true
  }
}
}}}

Since the framework is designed to support P2P protocols, the first thing to configure is the actual protocol used. This is done with the `interfaceType` parameter whose value is the class of the implementation of the [http://www.hypergraphdb.org/docs/javadoc/org/hypergraphdb/peer/PeerInterface.html PeerInterface]. Then normally a peer is bound to a local database instance, so you specify that instance location as well with the `localDB` parameter. The `peerName` parameter gives a user friendly, display name of the peer, it is part of the peer's identity within the network, but there's no requirement that it be unique. Finally, we have the detailed configuration of the XMPP network interface where we specify the user, password, server address (here we omit the port because we use the 5222 default for XMPP) and the chat room where peers should login. Replace "myhost" with the name of your machine in the above configuration: while putting "localhost" will work for the `serverUrl` parameter, the chat room JID (Jabber ID) needs the actual machine name.

For a complete list of top level configuration options, please see the PeerConfiguration page. For a list of XMPP specific configuration options, see the [ConfigurationXMPP] page.

== Starting Up a Peer ==

With the XMPP server and configuration ready, starting up a peer is a simple API call. The main entry point is the [http://www.hypergraphdb.org/docs/javadoc/org/hypergraphdb/peer/HyperGraphPeer.html HyperGraphPeer] class. You construct an instance of that class with the desired configuration and call its `startup` method:

{{{
public static void main(String[] args)
{
    File configFile = new File("hgp2p.json"); // or whatever directory you put that file in.
    HyperGraphPeer peer = new HyperGraphPeer(configFile);
    Future<Boolean> startupResult = peer.start();		
    try
    {
        if (startupResult.get())
	{
	    System.out.println("Peer started successfully.");
	}
	else
	{
	    System.out.println("Peer failed to start.");
	    peer.getStartupFailedException().printStackTrace(System.err);
	}
    } 
    catch (Exception e)
    {
        e.printStackTrace(System.err);
    }
}

}}}